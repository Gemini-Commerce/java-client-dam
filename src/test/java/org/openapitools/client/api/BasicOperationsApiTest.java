/*
 * Dam Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import GeminiCommerce_Dam.ApiException;
import org.openapitools.client.model.DamAsset;
import org.openapitools.client.model.DamBatchUploadAssetsRequest;
import org.openapitools.client.model.DamBatchUploadAssetsResponse;
import org.openapitools.client.model.DamCreateAssetRequest;
import org.openapitools.client.model.DamGetAssetByCodeRequest;
import org.openapitools.client.model.DamListAssetsByCodesRequest;
import org.openapitools.client.model.DamListAssetsByCodesResponse;
import org.openapitools.client.model.DamListAssetsByIdsRequest;
import org.openapitools.client.model.DamListAssetsByIdsResponse;
import org.openapitools.client.model.DamListAssetsRequest;
import org.openapitools.client.model.DamListAssetsResponse;
import org.openapitools.client.model.DamUpdateAssetRequest;
import org.openapitools.client.model.RpcStatus;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BasicOperationsApi
 */
@Disabled
public class BasicOperationsApiTest {

    private final BasicOperationsApi api = new BasicOperationsApi();

    /**
     * Batch Upload Assets
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchUploadAssetsTest() throws ApiException {
        DamBatchUploadAssetsRequest body = null;
        DamBatchUploadAssetsResponse response = api.batchUploadAssets(body);
        // TODO: test validations
    }

    /**
     * Batch Upload Assets
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchUploadAssets_0Test() throws ApiException {
        DamBatchUploadAssetsRequest body = null;
        DamBatchUploadAssetsResponse response = api.batchUploadAssets_0(body);
        // TODO: test validations
    }

    /**
     * Create Asset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAssetTest() throws ApiException {
        DamCreateAssetRequest body = null;
        DamAsset response = api.createAsset(body);
        // TODO: test validations
    }

    /**
     * Create Asset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAsset_0Test() throws ApiException {
        DamCreateAssetRequest body = null;
        DamAsset response = api.createAsset_0(body);
        // TODO: test validations
    }

    /**
     * Get Asset By Code
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAssetByCodeTest() throws ApiException {
        DamGetAssetByCodeRequest body = null;
        DamAsset response = api.getAssetByCode(body);
        // TODO: test validations
    }

    /**
     * Get Asset By Code
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAssetByCode_0Test() throws ApiException {
        DamGetAssetByCodeRequest body = null;
        DamAsset response = api.getAssetByCode_0(body);
        // TODO: test validations
    }

    /**
     * List Assets
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAssetsTest() throws ApiException {
        DamListAssetsRequest body = null;
        DamListAssetsResponse response = api.listAssets(body);
        // TODO: test validations
    }

    /**
     * List Assets By Codes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAssetsByCodesTest() throws ApiException {
        DamListAssetsByCodesRequest body = null;
        DamListAssetsByCodesResponse response = api.listAssetsByCodes(body);
        // TODO: test validations
    }

    /**
     * List Assets By Codes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAssetsByCodes_0Test() throws ApiException {
        DamListAssetsByCodesRequest body = null;
        DamListAssetsByCodesResponse response = api.listAssetsByCodes_0(body);
        // TODO: test validations
    }

    /**
     * List Assets By Ids
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAssetsByIdsTest() throws ApiException {
        DamListAssetsByIdsRequest body = null;
        DamListAssetsByIdsResponse response = api.listAssetsByIds(body);
        // TODO: test validations
    }

    /**
     * List Assets By Ids
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAssetsByIds_0Test() throws ApiException {
        DamListAssetsByIdsRequest body = null;
        DamListAssetsByIdsResponse response = api.listAssetsByIds_0(body);
        // TODO: test validations
    }

    /**
     * List Assets
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAssets_0Test() throws ApiException {
        DamListAssetsRequest body = null;
        DamListAssetsResponse response = api.listAssets_0(body);
        // TODO: test validations
    }

    /**
     * Update Asset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAssetTest() throws ApiException {
        DamUpdateAssetRequest body = null;
        DamAsset response = api.updateAsset(body);
        // TODO: test validations
    }

    /**
     * Update Asset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAsset_0Test() throws ApiException {
        DamUpdateAssetRequest body = null;
        DamAsset response = api.updateAsset_0(body);
        // TODO: test validations
    }

}
